#############################################DOM MANUPLILATION#############################################
-> DOCUMENT OBJECT MANUPLILATION IS A PROCESS BY WHICH YOU CAN MAKE BASIC HTML AND CSS WEBSITE WORK THROUGH DIFFERNET WAYS
->IN DOM ALL WE NEED TO ACCESS A PARTICULAR DATA AND THEN WE CAN DO ANYTHING IN THAT SUCH AS ADDING A TAG OR REMOVING A TAG
-> TEHSE ELEMENT CAN BE PROJECTS LIKE A FAMILY TREE
-> USING THESE METHODS WE CAN ACCESS AN ELEMENT AND THEN WE CAN STORE IT A VARIABLE SO THAT WE CAN DO ALL THE NEESSARY CHANGING

###ACCESSING ELEMENTS USING BASIC COMMANDS

1.ACCESSING BY THERE ID
//document.getElementById('id') 
THIS WILL GIVE US THE COMPLETE LINE UNDER THAT ID

2.ACCESSING BY THERE CLASS NAME
//document.getElementsByClassName('class')
THIS WILL RETURN A COMPLETE HTML COLLECTION IN WHICH WE'LL HAVE ALL THE CHILDRENS OF THAT PARTICULAR CLASS 

3.ACCESSING BY THERE TAG NAME
//document.getElementsByTagName('tag')
THESE WILL ALSO RETURN A COMPLETE HTML COLLECTION IN WHICH WE'LL HAVE ALL THE CHILDRENS OF THAT PARTICULAR TAG NAME

4.ACCESSING THE FIRST ELEMENT HAVING SAME CSS SELECTOR
//document.querySelector('selector')
THESE WILL GIVE US THE FIRST ELEMENT FROM MANY ELEMENT WITH THE SAME CSS SELECTOR, SUPPOSE WE HAVE MANY DIV TAGS BUT WE WANT THE ACCESS THE FIRST ONE THEN WE'LL USE THIS METHODS

5.ACCESSING EVERY ELEMENT HAVING THE SAME CSS SELECTOR
//document.querySelectorAll('selector') 
THESE WILL RETURN A NODELIST HAVING ALL THE ELEMENT WITH THE SAME CSS SELECTOR, SUPPOSE WE HAVE 3 DIV TAGS WITH THE SAME SELECTOR NAME AND WE HAVE TO IMPLEMENT CHANGES IN EVERY DIV THEN WE USE THIS



###STYLING AN ELEMENT

TO STYLE AN ELEMENT WE'LL FIRST STORE THE ELEMENT INTO SOME VARIABLE USING THE ABOVE METHODS->THEN WE'LL IMPLEMENT CHANGES ON THAT VARIABLE

1.LIKE IF WE NEED TO CHANGE THE COLOUR OF PARTICULAR ELEMENT THEN ONLY WE CAN USE THIS METHODS BECAUSE THIS WONT WORK ON GRP OF ELEMENT(INLINE STYLING)
->//CONST VARIABLE =document.querySelector('selector');
->//VARIABLE.STYLE.COLOR='RED';
->//CONSOLE.LOG(VARIABLE)

2.IF WE WANT TO IMPLEMENT A CHANGE ON A GROUP OF ELEMENT THEN WE HAVE TO RUN A LOOP ACCESSING EACH ELEMENT ONE BY ONE(INLINE STYLING)
->//CONST LIST =document.querySelectorAll('selector');
->//for(i=0;i<list.lenght;i++){
    ->//VARIABLE[i].STYLE.COLOR='RED';
}
->//CONSOLE.LOG(VARIABLE)

###ADDING AN ELEMENT BETWEEN A GROUP OF ELEMENTS (IT IS DONE IN 4 STEPS)

STEP 1-> CREATE AN ELEMENT

//const new=document.createElement('TAG NAME') create a new element
//CONST NEW =document.createTextNode('text') Create text node
//COSNT NEW =document.createDocumentFragment()

STEP 2->ADDED THE NEW ELEMENT INTO THE GROUP 
//parent.appendChild(child)//Add child to end of parent
//parent.insertBefore(newNode, referenceNode)// Insert before reference NODE
//parent.insertAdjacentElement(position, element)//Insert at specified position
//parent.insertAdjacentHTML(position, html)// Insert HTML at specified position
//parent.insertAdjacentText(position, text)//// Insert text at specified position

STEP 3->MODIFYING THE CONTENT OF THE NEW TAG(TILL NOW YOU HAVE ONLY CREATED AN EMPTY ELEMENT IN WHICH WE'LL INJECT THE DATAS)
*FOR MODIFYING WE HAVE THERE DIFFERNET WAYS
3.1//console.log(parent.innerText)// THIS SHOWS WHOLE RAW TEXT
//children.innerText='new text'// THIS WILL ADD YOUR TEXT IN THE PARENT NODE


3.2//console.log(parent.innerContext)//THIS SHOWS THE TEXT IN THE EXACT SAME WAY PRESENT IN HTML (IT INCLUDES DIFFERNT LINES) 



3.3//console.log(parent.innerHTML)//THIS SHOWS ALL THE TAGS ALSO PRESENT INSIDE THAT TAG


###MODIFYING ATTRIBUTS

->//children.setAttribute('id','present');// THIS WILL SET YOUR CHILD'S ATTRIBUTE AS OF THE PRESNT'S ELEMENT

->//children.removeAttribute('id');// THIS WILL BRING BACK TO ITS DEFAULT ATTRIBUTE

->//element.hasAttribute('id')// Check if attribute exists

->//element.getAttributeNames()// Get all attribute names

->//element.getAttribute('id')// Get attribute value


